" init.vim
"{{{ misc options, sane defaults
set modelines=1

let g:loaded_python_provider = 0
" let g:loaded_python3_provider = 1
let g:virtualenv = '~/.virtualenvs/dotfiles-run/bin'
let g:python3_host_prog = g:virtualenv.'/python3'

set lazyredraw

if exists('+termguicolors')
  set termguicolors
endif

let g:matchparen_timeout = 2
let g:matchparen_insert_timeout = 2

" Always display the statusline in all windows
set laststatus=2
" Hide the default mode text (e.g. -- INSERT -- below the statusline)
set noshowmode

" Allow switching to other buffer without saving
set hidden

" Do not wrap on search in order to not miss reaching the end of matches
set nowrapscan

set tabstop=2 softtabstop=2 shiftwidth=2 expandtab shiftround

set wildignore+=*/node_modules/*,*.aux,*.d,*.o,*.pyc
set wildignorecase

" Shamelessly copied from Steve Losh's vimrc
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/

" First off, some standard settings, making vim more 'sane'
set encoding=utf-8
set scrolloff=3
set autoindent
set wildmenu
set ttyfast
" Set both number and relativenumber for hybrid number
" If version is before 7.4, the last setting, i.e. relativenumber persists
set number
set relativenumber
set undofile
set noautochdir

let mapleader = ','

" fix vim's default regex handling / search behavior
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>

" handle lines intelligently
set wrap
" set textwidth=79
set formatoptions+=qrn1
set colorcolumn=81

" set default chars for whitespace in list chars
set list
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

set pastetoggle=<leader>p

" Allow to delete old characters in insert mode
" Also needed that latex-suite will be able to delete placeholders
set backspace=2

"" Original Source: https://stackoverflow.com/a/22676189/522251
let vimDir = expand('$HOME/.vim')
let &runtimepath.=','.vimDir

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = vimDir . '/undodir'

    " Create dirs
    if !isdirectory(myUndoDir)
      call mkdir(myUndoDir, 'p')
    endif

    let &undodir = myUndoDir
    set undofile
endif

set completeopt=menu,menuone,noselect
set shortmess+=c
"}}}

"{{{ plugins
"
" Specify a directory for plugins
call plug#begin(stdpath('data') . '/plugged')

Plug 'preservim/nerdtree', { 'on': ['NERDTreeFind', 'NERDTreeToggle', 'NERDTreeCWD'] }

Plug 'neovim/nvim-lspconfig'
Plug 'simrat39/rust-tools.nvim'
Plug 'nvim-lua/plenary.nvim'
Plug 'mfussenegger/nvim-dap'

Plug 'udalov/kotlin-vim'
"
" If you don't have nodejs and yarn
" use pre build, add 'vim-plug' to the filetype list so vim-plug can update this plugin
" see: https://github.com/iamcco/markdown-preview.nvim/issues/50
Plug 'iamcco/markdown-preview.nvim', { 'do': ':call mkdp#util#install()', 'for': 'markdown'}

Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-vsnip'

Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

Plug 'kaihowl/vim-indent-sentence'

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'

Plug 'christoomey/vim-tmux-navigator'

Plug 'nathanaelkane/vim-indent-guides'
" TODO(hoewelmk) #531 workaround
Plug 'bronson/vim-trailing-whitespace', { 'tag': '9071740' }

Plug 'godlygeek/tabular'
Plug 'justinmk/vim-sneak'
Plug 'airblade/vim-gitgutter'
Plug 'majutsushi/tagbar'

Plug 'MarcWeber/vim-addon-local-vimrc'

Plug 'sainnhe/edge'
Plug 'morhetz/gruvbox'
Plug 'folke/tokyonight.nvim'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'NLKNguyen/papercolor-theme'
Plug 'kaiuri/nvim-juliana'

" Fugitive browse handlers
Plug 'tommcdo/vim-fubitive' " Bitbucket
Plug 'tpope/vim-rhubarb' " Github

Plug 'editorconfig/editorconfig-vim'

Plug 'tomtom/tcomment_vim'

Plug 'skywind3000/asynctasks.vim'
Plug 'skywind3000/asyncrun.vim'

Plug 'ibhagwan/fzf-lua'

Plug 'gaving/vim-textobj-argument'

" the plug#end automatically calls "filetype plugin indent on" and "syntax enable"
call plug#end()
" }}}

"{{{ color
if !exists('g:first_time_startup')
  exe 'source ' . expand('~/.color/') . 'color.vim'

  augroup color
    autocmd!
    autocmd FocusGained * exe 'source ' . expand('~/.color/') .  'color.vim'
  augroup END
end

"}}}

"{{{ vim-indent-guides
" Enable indent guides per default
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'fzf']
"}}}

"{{{ vim-trailing-whitespace
let g:extra_whitespace_ignored_filetypes = ['help', 'nerdtree', 'fzf']
"}}}

"{{{ helper functions

" Sudo after the fact
cmap w!! w !sudo tee % >/dev/null

" Source https://vim.fandom.com/wiki/Search_for_visually_selected_text
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

" Silent command
command! -nargs=1 Silent
      \ execute ':silent '.<q-args>
      \ | execute ':redraw!'

" Restore position command
command! -nargs=1 RestoreCurPos
      \ let save_cursor = getpos('.')
      \ | execute <q-args>
      \ | call setpos('.', save_cursor)
"}}}

"{{{ fugitive
function s:diff_to_default_branch()
  let defaultbranch = Get_default_branch()
  exe 'Gvdiffsplit ' . defaultbranch
endfunction

" Fugitive mappings
nnoremap <leader>gs :G<cr>

nnoremap <leader>gl :0Gclog --after='6 months ago'<cr>
nnoremap <leader>gL :0Gclog<cr>
" Gclog with a range already restores the cursor position on the expected
" chunk. This is superior to just retaining the current cursor position.
vnoremap <leader>gl :Gclog --after='6 months ago'<cr>
vnoremap <leader>gL :Gclog<cr>

nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gm :call <sid>diff_to_default_branch()<cr>
nnoremap <leader>ge :RestoreCurPos Gedit<cr>
nnoremap <leader>gE :RestoreCurPos Gtabedit<cr>
nnoremap <leader>gb :Git blame<cr>
nnoremap <leader>gru :Git rebase @{u}<cr>
nnoremap <leader>gri :Git rebase -i @{u}<cr>
nnoremap <leader>g- :Silent Git stash -u<cr>:windo e<cr>
nnoremap <leader>g+ :Silent Git stash pop<cr>:windo e<cr>
" Git snapshot (stash everything, and apply again immediately)
nnoremap <leader>g0 :Silent ! git-stash-push ""<left>

" Git diff mapping 'push and next'
nnoremap <leader>n dp]c

" Git diff compare merge to base
nnoremap <leader>g2 :RestoreCurPos Gedit :2<cr>:Gvdiff :1<cr>
nnoremap <leader>g3 :RestoreCurPos Gedit :3<cr>:Gvdiff :1<cr>

" Fugitive git push / fetch mappings
nnoremap <leader>gp :Git! push<cr>
nnoremap <leader>gP :Git! pub<cr>
nnoremap <leader>gf :Git! fetch --verbose<cr>

augroup nolist_filtypes
  autocmd!
  autocmd! FileType qf,git set nolist
augroup END


" Git mapping for finding conflict markers
nnoremap <leader>c /\m\(<<<<<<< \\|=======\n\\|>>>>>>> \)<cr>

" configure vim-fubitive GBrowse handler for bitbucket
let g:fubitive_domain_pattern = 'bitbucket\.tomtomgroup\.com'
"}}}

"{{{ fzf-lua
let g:fzf_history_dir = expand('~/.local/share/fzf-history')

" Create dirs
if !isdirectory(g:fzf_history_dir)
  call mkdir(g:fzf_history_dir, 'p')
endif

if !exists('g:first_time_startup')
lua <<EOF
require('fzf-lua').setup{
  winopts = {
    split = 'botright new'
  },
  fzf_opts = {
    -- Remove default reverse layout to get prompt at bottom
     ['--layout']      = false,
     ['--history']     = vim.g.fzf_history_dir .. '/' .. 'history'
  },
  grep= {
    rg_opts = '--hidden --column --line-number --no-heading --color=always --smart-case --max-columns=512',
  },
  files = {
    rg_opts = '--hidden --files --color=never --glob ""',
    winopts = {
      preview = {
        hidden = 'hidden',
      },
    },
  },
  buffers = {
    winopts = {
      preview = {
        hidden = 'hidden',
      },
    },
  },
  git = {
    branches = {
      cmd = "git branch --color --sort=-committerdate",
      cwd = "%:h:p"
    }
  }
}
EOF
endif

nnoremap <leader>s :FzfLua files<cr>
nnoremap <leader>d :FzfLua buffers<cr>
nnoremap <leader>f<space> :FzfLua<space>
nnoremap <leader>fc :FzfLua changes<cr>
nnoremap <leader>fj :FzfLua jumps<cr>
nnoremap <leader>fb :FzfLua git_branches<cr>
nnoremap <leader>R :FzfLua live_grep<cr>
"}}}

"{{{ mode escaping
" Normal mode commands
" easier escaping
inoremap jj <ESC>
" join two lines
inoremap JJ <esc>Ji
" Exit terminal mode with the same shortcut as normal mode
tnoremap jj <C-\><C-n>
"}}}

"{{{ python
" python pep8 compliance
augroup python_ft
  autocmd!
  autocmd BufEnter *.py set sw=4 ts=4 sta et fo=croql
augroup END
"}}}

"{{{ asynctasks / asyncrun

" Call asynctask with pwd: for submodules with individual task files, only the
" task file from the current working directory should count.

function! SimpleAsyncTaskComplete(Arg, Ignore1, Ignore2)
  return join(map(asynctasks#list('.'), 'v:val["name"]'), "\n")
endfunction

function! SimpleAsyncTaskLast()
  if g:asynctasks_last ==# ''
    echoerr 'no task history'
    return -1
  endif
  call asynctasks#start('', g:asynctasks_last, '.')
endfunction

function! SimpleAsyncTask(taskname)
  let g:asynctasks_last = a:taskname
  call asynctasks#start('', a:taskname, '.')
endfunction

" TODO(kaihowl) this loses the templating functionality
function! SimpleAsyncTaskEdit()
  edit .tasks
endfunction

command! -bang -nargs=* -range=0 -complete=custom,SimpleAsyncTaskComplete SimpleAsyncTask
			\ call SimpleAsyncTask(<q-args>)
command! -bang -nargs=* -range=0 SimpleAsyncTaskLast
			\ call SimpleAsyncTaskLast()
command! -bang -nargs=0 -range=0 SimpleAsyncTaskEdit
			\ call SimpleAsyncTaskEdit()

nnoremap <leader>mm :SimpleAsyncTaskLast<cr>
nnoremap <leader>mx :AsyncStop <bar> :vert copen<cr>
nnoremap <leader>M :SimpleAsyncTaskEdit<cr>
nnoremap <leader>m<space> :SimpleAsyncTask<space>

let g:asynctasks_term_pos = 'tab' " Run terminal tasks in new, internal tab window
let g:asynctasks_confirm = 0 " Do not confirm filename when edit task config file
let g:asynctasks_template = {}
let g:asynctasks_template.cpp = [
            \ '[file-build-run]',
            \ 'command=clang++ -std=c++17 $(VIM_FILEPATH) -o $(VIM_FILEDIR)/$(VIM_FILENOEXT) && $(VIM_FILEDIR)/$(VIM_FILENOEXT)',
            \ ]

augroup asynctasks
  autocmd!
  autocmd User AsyncRunStart set splitright | vert copen | wincmd = | wincmd p | set nosplitright
augroup END
"}}}

"{{{ latex
" For latex file run latex instead of makefile
augroup latex_ft
  autocmd!
  autocmd FileType tex nnoremap <buffer> <leader>mm :silent! call Tex_RunLaTeX()<CR>
augroup END

" Make sure latex-suite is invoked for plaintex files
let g:tex_flavor='latex'

" Configure pdf format for latex-suite
let g:Tex_DefaultTargetFormat = 'pdf'
let g:Tex_CompileRule_pdf = 'pdflatex -synctex=1 --interaction=nonstopmode $*'
let g:Tex_ViewRule_pdf = 'Skim'

" Set more sensible ignore warning level for latex-suite
" ensures that missing numbers, undefined references, and citations are shown
let g:Tex_IgnoreLevel = 4

" Change default alt mappings for latex-suite to mac friendly ones
imap <leader>lb <Plug>Tex_MathBF
imap <leader>lc <Plug>Tex_MathCal
imap <leader>ll <Plug>Tex_LeftRight
imap <leader>li <Plug>Tex_InsertItemOnThisLine

" Blindly robbed from Janus vim.rc
" https://github.com/rdeits/janus/blob/master/vimrc
" Calculate the number of screen lines needed to display a file with folds at
" the given fold_level. This is used to set the initial fold level of a file
" in order to display the entire file on screen if possible without closing
" any unnecessary folds.
function! ScreenLines(fold_level)
  let line_num = 1
  let screen_lines = 0
  let prev_fold_level = 0
  let cur_fold_level = 0
  let buf_length = line('$')
  while line_num <= buf_length
    let fold_expr = foldlevel(line_num)
    let prev_fold_level = cur_fold_level
    let cur_fold_level = fold_expr
    if (cur_fold_level <= a:fold_level) || ((cur_fold_level != prev_fold_level) && (prev_fold_level <= a:fold_level))
      let screen_lines = screen_lines + 1
    endif
      let line_num = line_num+1
   endwhile
   return screen_lines
endfunction

" Increase the fold level until the entire file will fit on the screen or
" foldlevel reaches 10, whichever comes first.
function! FoldToScreen()
  let ndx = 0
  set foldlevel=0
  while ndx < 10
    let ndx = ndx + 1
    if ScreenLines(ndx) > &lines
      break
    endif
    set foldlevel+=1
  endwhile
endfunction

augroup tex_fold_function
  autocmd!
  autocmd BufWinEnter *.tex call FoldToScreen()
augroup END

" Function to break lines in tex files on period(.) and wrap to colorcolumn
" This makes version control for latex files easier since git is line-based
command! -range LineBreakTexSource :silent! <line1>,<line2>s/\. /.\r/g | :<line1>,<line2>normal gw | :noh<cr>

" Comment out, if you need to debug latex-suite
"let g:Tex_Debug=1
"let g:Tex_DebugLog="texdebug.log"
"}}}

"{{{ spellchecking
" enable spellchecking for git commits
augroup spellchecking
  autocmd!
  autocmd FileType gitcommit setlocal spell
  autocmd FileType gitcommit setlocal textwidth=71 colorcolumn=+1
  " and for markdown files
  autocmd FileType markdown setlocal spell
  " and for tex files
  autocmd FileType tex setlocal spell
  autocmd FileType tex syntax spell toplevel
augroup END
"}}}

"{{{ vim-indent-sentence
" For paragraph, restore position using register T
nnoremap <leader>ip i//CURSOR//<esc>vip :call g:IndentSentence()<cr>:%s/\/\/CURSOR\/\///<cr>
vnoremap <leader>is :call g:IndentSentence()<cr>
"}}}

"{{{ gitgutter
" gitgutter configuration
" explicitly set hunk navigation commands
nmap [h <Plug>(GitGutterPrevHunk)
nmap ]h <Plug>(GitGutterNextHunk)
"}}}

"{{{ tagbar
" open tagbar (and focus) (or jump to if open)
nnoremap <leader>o :TagbarOpen fj<cr>
" show line numbers in tagbar
let g:tagbar_show_linenumbers=-1
"}}}

"{{{ rg
" Set smart case for rg
if executable('rg')
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --hidden
  let &grepformat='%f:%l:%c:%m'
endif

fun! s:Grep(txt, bang)
  if empty(a:txt)
    let needle = expand('<cword>')
  else
    let needle =  a:txt
  endif
  " Escape vim command mode special chars.
  " Borrowed from mileszs/ack.vim.
  let needle = escape(needle, '|#%')
  " And escape full search string for shell usage.
  " Unless passing <bang>, then allow for passing arguments.
  if a:bang !=# '!'
    let needle = shellescape(needle)
  endif
  silent! execute 'grep! ' . needle
  copen
endfun

fun! s:GrepCurrentWord()
  call s:Grep('-w ' . expand('<cword>'), '!')
endfun

command! -bang -nargs=* Rg :call s:Grep(<q-args>, '<bang>')
command! RgCurrentWord :call s:GrepCurrentWord()

noremap <leader>rr :RgCurrentWord<cr>
noremap <leader>r<space> :Rg<space>
"}}}

"{{{ filetypes
" Add yaml file type for salt sls files
augroup salt_ft
  autocmd!
  autocmd BufEnter *.sls set ft=yaml
augroup END

augroup groovy_filetype
  autocmd!
  autocmd FileType groovy set sw=4 ts=4 sta et fo=croql
augroup END

augroup markdown
  autocmd!
  autocmd FileType markdown nmap <leader>P <Plug>MarkdownPreview
augroup END

setglobal commentstring=//\ %s
augroup cpp_comments
  autocmd!
  autocmd FileType cpp setlocal commentstring=//\ %s
augroup END
"}}}

"{{{ conventional-commits
" https://www.reddit.com/r/vim/comments/dj37wt/plugin_for_conventional_commits/
augroup commit
  autocmd!
  autocmd FileType gitcommit nnoremap <buffer> i  i<C-r>=<sid>commit_type()<CR>
  autocmd FileType gitcommit inoreabbrev <buffer> BB BREAKING CHANGE:
augroup END

fun! s:commit_type()
  call complete(1, ['fix: ', 'feat: ', 'refactor: ', 'docs: ', 'test: ', 'ci: ', 'chore: ', 'perf: '])
  nunmap <buffer> i
  return ''
endfun
"}}}

"{{{ diffopt
" https://github.com/tommcdo/vimfiles/blob/master/config/diffopt.vim
" Provide a function to toggle iwhite (ignore whitespace)
function! s:toggle_iwhite(opt)
  if a:opt == -1 || (a:opt == 0 && &diffopt =~# 'iwhite')
    echo ':set diffopt-=iwhite'
    set diffopt-=iwhite
  elseif a:opt == 1 || (a:opt == 0 && &diffopt !~# 'iwhite')
    echo ':set diffopt+=iwhite'
    set diffopt+=iwhite
  endif
endfunction

" Add mappings for toggling and setting iwhite (in the style of unimpaired.vim)
nnoremap coD :call <SID>toggle_iwhite(0)<CR>
nnoremap [oD :call <SID>toggle_iwhite(1)<CR>
nnoremap ]oD :call <SID>toggle_iwhite(-1)<CR>
"}}}

"{{{ pull request handling
function! Get_default_branch() abort
  " Source: https://stackoverflow.com/questions/28666357/git-how-to-get-default-branch
  " let defaultbranch = execute("Git symbolic-ref refs/remotes/origin/HEAD")
  let defaultbranch = split(execute('Git rev-parse --abbrev-ref origin/HEAD'), "\n")[0]
  let output = execute('Git rev-parse --abbrev-ref origin/HEAD')
  if output =~? '.*fatal: .*'
    echohl WarningMsg
    echom 'Could not detect default branch, using origin/master.'
    echom 'Maybe .git/refs/remotes/origin/HEAD is missing as this repo has not been cloned?'
    echom 'Set symbolic ref manually: git symbolic-ref refs/remotes/origin/HEAD refs/remotes/origin/master.'
    echom 'Using default origin/master.'
    let defaultbranch = 'origin/master'
    echohl None
  else
    let defaultbranch = split(output, "\n")[0]
  endif
  return defaultbranch
endfunction

function! s:get_diff_file_master_merge() abort
  let defaultbranch = Get_default_branch()
  let common_revision = split(execute('Git merge-base ' . defaultbranch . ' HEAD'), "\n")[0]
  return common_revision
endfunction

command! -nargs=1 DiffRev call s:get_diff_files(<q-args>)

nnoremap <leader>gD :call <SID>view_merge_request()<cr>
command! DiffHistory call s:view_merge_request()

" Source / Inspiration
" https://github.com/tpope/vim-fugitive/issues/132#issuecomment-649516204
function! s:view_merge_request() abort
  let revision = <sid>get_diff_file_master_merge()
  execute 'Git difftool --numstat ' . revision . '..HEAD --find-renames=50\%'
  if len(getqflist()) > 0
    call s:diff_current_quickfix_entry()
  endif
  " Bind <CR> for current quickfix window to properly set up diff split layout after selecting an item
  " There's probably a better way to map this without changing the window
  copen
  nnoremap <buffer> <CR> <CR><BAR>:call <sid>diff_current_quickfix_entry()<CR>
  wincmd p
endfunction

function s:diff_current_quickfix_entry()
  " Cleanup windows
  for window in getwininfo()
    if window.winnr !=? winnr() && bufname(window.bufnr) =~? '^fugitive:'
      exe 'bdelete' window.bufnr
    endif
  endfor
  cc
  call s:add_mappings()
  let qf = getqflist({'context': 0, 'idx': 0})
  if get(qf, 'idx') && type(get(qf, 'context')) == type({}) && type(get(qf.context, 'items')) == type([])
    let diff = get(qf.context.items[qf.idx - 1], 'diff', [])
    for i in reverse(range(len(diff)))
      exe (i ? 'rightbelow' : 'leftabove') 'vert diffsplit' fnameescape(diff[i].filename)
      call s:add_mappings()
    endfor
  endif
endfunction

function! s:add_mappings()
  nnoremap <buffer>]q :cnext <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  nnoremap <buffer>[q :cprevious <BAR> :call <sid>diff_current_quickfix_entry()<CR>
  " Reset quickfix height. Sometimes it messes up after selecting another item
  11copen
  wincmd p
endfunction
"}}}

"{{{status line
function! FormattedAsyncRun()
  let colors = { 'running': 'DiffText',
    \'success': 'DiffAdd',
    \'failure': 'DiffDelete'}
  if g:asyncrun_status ==? ''
    return ''
  endif

  if g:asynctasks_last ==? ''
    return ''
  endif

  return '%#' . colors[g:asyncrun_status] . '# %1.15{g:asynctasks_last} %*'

endfunction
" source: https://shapeshed.com/vim-statuslines
set statusline=
set statusline+=\ %f
set statusline+=\ %m
set statusline+=%=
set statusline+=%#PmenuSel#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c
set statusline+=\ 
if !exists('g:first_time_startup')
  set statusline+=\ %{%FormattedAsyncRun()%}
endif
"}}}

"{{{ NerdTree
" Source: https://github.com/junegunn/vim-plug/issues/424#issuecomment-189343357
augroup nerd_loader
  autocmd!
  autocmd VimEnter * silent! autocmd! FileExplorer
  autocmd BufEnter,BufNew *
        \  if isdirectory(expand('<amatch>'))
        \|   call plug#load('nerdtree')
        \|   execute 'autocmd! nerd_loader'
        \| endif
augroup END

augroup nerdtree_group
  autocmd!
  autocmd! User nerdtree call AddNerdTreeMapping()
augroup END

function! AddNerdTreeMapping()
  call NERDTreeAddKeyMap({
          \ 'key': 'yy',
          \ 'callback': 'NERDTreeYankCurrentNode',
          \ 'quickhelpText': 'put full path of current node into the default register' })
endfunction

function! NERDTreeYankCurrentNode()
    let n = g:NERDTreeFileNode.GetSelected()
    if n != {}
        call setreg('"', n.path.str())
    endif
endfunction

" Make nerdtree work like vim-vinegar
let g:NERDTreeMapJumpParent = '-'
" Root dir
nmap - :NERDTreeCWD<cr>

" Current file when buffer open
augroup nerdtree_find
  autocmd!
  autocmd BufRead * nmap - :NERDTreeFind<CR>
augroup END
"}}}

"{{{ Todo functionality
function! s:GetUser()
  return trim(system('id -un'))
endfunction

function! s:SearchForToDo()
  let user = <sid>GetUser()
  execute ':Rg todo.'.user
endfunction

function! s:GenerateToDo()
  let user = <sid>GetUser()
  return 'TODO(' . user . ')'
endfunction

inoremap <expr> <leader>t <sid>GenerateToDo()
nnoremap <leader>t :call <sid>SearchForToDo()<cr>
"}}}

"{{{vim-addon-local-vimrc
let g:local_vimrc = {'names':['.vimrc', '.nvimrc'],'hash_fun':'LVRHashOfFile'}
"}}}

"{{{ lsp + vsnip config
if !exists('g:first_time_startup')
lua <<EOF
local configs = require('lspconfig')
-- This is grabbing into internals of lspconfig. If this breaks, this is on me.
local util = require 'lspconfig/util'
local root_pattern = util.root_pattern('compile_commands.json')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', '<c-]>', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<leader>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<leader>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<leader>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<leader>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<leader>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<leader>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<leader>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
  buf_set_keymap('n', '<leader>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

-- The nvim-cmp almost supports LSP's capabilities so You should advertise it to LSP servers..
local capabilities = require('cmp_nvim_lsp').default_capabilities()

-- Get compile_commands.json based on current working directory in case there are multiple available, e.g., conan workspaces with the workspace vs the single package build
-- Supply an invalid dir to clangd in case that no compile_commands.json can be found in the current working dir. This restores the original behavior.
configs.clangd.setup{root_dir=function(fname)
    return root_pattern(vim.loop.cwd()) or util.path.dirname(fname)
  end,
  cmd={'clangd','--completion-style=detailed', '--background-index', '--compile-commands-dir='..(root_pattern(vim.loop.cwd()) or '')},
  capabilities=capabilities,
  on_attach=function(client, bufnr)
    local opts = { noremap=true, silent=true }
    vim.api.nvim_buf_set_keymap(bufnr, 'n', '<leader>gh', '<cmd>ClangdSwitchSourceHeader<CR>', opts)
    on_attach(client, bufnr)
  end
}

configs.pylsp.setup{on_attach=on_attach, capabilities=capabilities}

local pylsp_binary = vim.api.nvim_eval("expand(g:virtualenv)").."/pylsp"
configs.pylsp.setup{cmd={pylsp_binary}, on_attach=on_attach, capabilities=capabilities}

configs.efm.setup {
    -- Fallback to cwd in case of hitting a fugitive buffer
    root_dir=function(fname)
      return util.find_git_ancestor(fname) or vim.loop.cwd()
    end,
    settings = {
      rootMarkers = {".git"},
    },
    on_attach=on_attach,
    capabilities=capabilities,
    init_options = {documentFormatting = true},
    -- In order for neovim's built-in language server client to send the appropriate languageId to EFM, you must
    -- specify filetypes in your call to setup{}. Otherwise lspconfig will launch EFM on the BufEnter instead
    -- of the FileType autocommand, and the filetype variable used to populate the languageId will not yet be set.
    filetypes = {'sh', 'zsh', 'vim'},
}

require('rust-tools').setup {
  server = {
    on_attach = on_attach,
    capabilities = capabilities,
    settings = {
      ["rust-analyzer"] = {
        checkOnSave = {
          command = "clippy"
        }
      }
    }
  }
}
-- Sourced from https://github.com/hrsh7th/nvim-cmp/wiki/Example-mappings
local has_words_before = function()
  local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
end

local feedkey = function(key, mode)
  vim.api.nvim_feedkeys(vim.api.nvim_replace_termcodes(key, true, true, true), mode, true)
end

-- Sourced from readme of cmp plugin
local cmp = require'cmp'
cmp.setup {
  snippet = {
    expand = function(args)
    -- For `vsnip` user.
    vim.fn["vsnip#anonymous"](args.body)
  end,
  },
  mapping = {
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    -- Accept currently selected item. If none selected, `select` first item.
    -- Set `select` to `false` to only confirm explicitly selected items.
    ['<CR>'] = cmp.mapping.confirm({ select = false }),
    ['<Tab>'] = cmp.mapping(function(fallback)
    if cmp.visible() then
      cmp.select_next_item()
    elseif vim.fn["vsnip#available"]() == 1 then
      feedkey("<Plug>(vsnip-expand-or-jump)", "")
    elseif has_words_before() then
      cmp.complete()
    else
      fallback() -- The fallback function sends a already mapped key. In this case, it's probably `<Tab>`.
    end
  end, { "i", "s" }),

  ["<S-Tab>"] = cmp.mapping(function()
  if cmp.visible() then
    cmp.select_prev_item()
  elseif vim.fn["vsnip#jumpable"](-1) == 1 then
    feedkey("<Plug>(vsnip-jump-prev)", "")
  end
      end, { "i", "s" }),
      },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'vsnip' },
    { name = 'buffer',
      option = {
        get_bufnrs = function()
          local buf = vim.api.nvim_get_current_buf()
          local byte_size = vim.api.nvim_buf_get_offset(buf, vim.api.nvim_buf_line_count(buf))
          if byte_size > 1024 * 1024 then -- 1 Megabyte max
            return {}
          end
          return { buf }
        end
      }
    },
  },
  sorting = {
    comparators = {
      -- Most importantly boost the original 'order' before 'kind'
      cmp.config.compare.score,
      cmp.config.compare.order,
      cmp.config.compare.exact,
      cmp.config.compare.kind,
      cmp.config.compare.offset,
      cmp.config.compare.length,
      cmp.config.compare.sort_text,
    }
  }
}
EOF
endif
"}}}

"{{{ vsnip
" Expand
imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'

" Jump forward or backward
imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
"}}}

"{{{ format on save
" Auto-format files when possible prior to saving
augroup autoformat
  autocmd!
  autocmd BufWritePre * lua vim.lsp.buf.format { timeout_ms = 1000 }
augroup END
" }}}

"{{{ vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1

nnoremap <M-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-j> :TmuxNavigateDown<cr>
nnoremap <silent> <M-k> :TmuxNavigateUp<cr>
nnoremap <M-l> :TmuxNavigateRight<cr>
" nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>
"}}}
"
augroup CleanUpMatchAll
  autocmd!
  " We do not want the local errorformat to drop all non matched lines
  " Otherwise, asyncrun will not show the output.
  " Fixes #367
  autocmd FileType * setlocal errorformat-=%-G%.%#
augroup END

" vi: ft=vim : fen : fdm=marker : fmr={{{,}}} : fdl=0
