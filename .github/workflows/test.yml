name: Test dotfiles

on:
  push:
    branches:
      - master
      - build/*
  pull_request:
    branches:
      - master
  schedule:
    - cron: 41 11 * * 0
jobs:
  lint:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v2
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          severity: style
          # Prevent SC1090/SC1091. Will fail if we have too many scripts.
          # Check usage of "-x" or "external-sources=true" then.
          check_together: 'yes'
          ignore_paths: nvim/test-efm
        env:
          SHELLCHECK_OPTS: -s bash

  build:
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11]
      fail-fast: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: '.dotfiles'
          fetch-depth: 40
      - name: Unlink git
        shell: bash
        if: ${{ matrix.os == 'macos-11' }}
        run: |
          # Make the brew link stage of git install succeed
          brew unlink git@2.35.1 || true
      - run: |
          cd .dotfiles/
          git config --global user.email "git-perf@example.com"
          git config --global user.name "git-perf"
      - name: Install and test
        shell: bash
        run: |
          export HOME=$(pwd)
          env
          export XDG_CONFIG_HOME=$(pwd)/.config
          # Don't care about outdated, broken linkages on CI.
          # Otherwise, this might update node or php.
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          export HOMEBREW_NO_INSTALL_CLEANUP=1
          cd .dotfiles/
          ./script/ci.sh
          zsh -i ./script/perf.sh
  report:
    needs: build
    concurrency: gh-pages-concurrency # keep_files==True uses last writer wins
    if: always()
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 40
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v4
      - name: use commit name as report name
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "REPORT_NAME=${{github.sha}}" >> $GITHUB_ENV
      - name: use branch name as report name
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "REPORT_NAME=${GITHUB_REF_SLUG}" >> $GITHUB_ENV
      - name: report
        shell: bash
        run: |
          export PATH=$(pwd)/bin:$PATH
          python3 -m pip install -r bin/git-perf-requirements.txt
          git perf pull
          mkdir reports/
          git perf report -n 40 -o reports/${{env.REPORT_NAME}}.html -s os
      - name: Publish new perf reports
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports
          keep_files: true
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const { REPORT_NAME } = process.env
            const pages = await github.rest.repos.getPages({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚è±  [Performance Results](${pages.data.html_url}/${REPORT_NAME}.html)`
              })

