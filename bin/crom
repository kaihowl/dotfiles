#!/bin/bash
set -ex

shopt -s nocasematch

function print_red {
  printf "\033[0;31m%s\033[0m\n" "$1"
}

update=""
if [[ "$*" =~ update ]]; then
  update="--update"
fi

sanitizer=""
if [[ "$*" =~ asan ]]; then
  sanitizer="Address"
elif [[ "$*" =~ tsan ]]; then
  sanitizer="Thread"
fi

libcxx=""
if [[ "$*" == *"libc++"* ]]; then
  libcxx="libc++"
fi

conan_package_name=$(conan inspect . | grep 'name:' | cut -d' ' -f2)

sanitizer_flags=()
if [[ -n "${sanitizer}" ]]; then
  sanitizer_flags=(-s "${conan_package_name}:compiler.sanitizer=${sanitizer}")
fi

library_switch=()
if [[ -n "${libcxx}" ]]; then
  library_switch=(-s "compiler.libcxx=${libcxx}")
fi

profile_switch=(${CROM_DEFAULT_PROFILE:+-pr $CROM_DEFAULT_PROFILE})

if [ -z "${CROM_DEFAULT_PROFILE}" ]; then
  print_red "Missing CROM_DEFAULT_PROFILE"
fi

additional_switches=()
for var in "${!CROM_@}"; do
  setting=$(echo "${var}" | cut -d'_' -f2)
  if [[ "$*" =~ $setting ]]; then
    additional_switches+=("${!var}")
  fi
done

build_type=Debug
if [[ "$*" =~ release ]]; then
  build_type=Release
fi

if [[ "$*" =~ create ]]; then
  conan create $update "${sanitizer_flags[@]}" "${additional_switches[@]}" "${library_switch[@]}" "${profile_switch[@]}" -s "${conan_package_name}:build_type=${build_type}" --build=outdated . "${conan_package_name}/9001@user/testing"
else
  mkdir -p build
  pushd build

  # Always force full regeneration
  rm -f CMakeCache.txt

  conan install $update "${sanitizer_flags[@]}" "${additional_switches[@]}" "${library_switch[@]}" "${profile_switch[@]}" -s "${conan_package_name}:build_type=${build_type}" --build=outdated ..

  if [[ -f ../conanfile.py ]]; then
    CONAN_CMAKE_GENERATOR=Ninja conan build -c ..
  else
    cmake -G Ninja ..
  fi

  popd

  ln -sf build/compile_commands.json .
fi
