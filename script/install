#!/bin/bash
set -e

cd "$(dirname "$0")"/..

# Disable SELinux: nix won't install with it + invocation of nix on CentOS9
# leads to job control stopping the script.
# Install everything without SELinux, afterwards enable SELinux again.
selinux_state=Permissive

if which getenforce; then
  selinux_state=$(sudo getenforce)
fi

if [[ ${selinux_state} == Enforcing ]]; then
  echo "Disabling SELinux"
  sudo setenforce Permissive
fi

function restore_selinux() {
  if which getenforce; then
    if [[ $selinux_state == Enforcing ]]; then
      echo "Enabling (Restoring) SELinux"
      sudo setenforce Enforcing
    fi
  fi
}

trap restore_selinux EXIT

source common/perf_stubs.sh

if [[ "$(uname)" == *"Darwin"* ]] && [[ "$(xcode-select -p)" == *"CommandLineTools"* ]]; then
  # Full XCode is for example needed to compile pynvim's greenlet
  printf "Running \e[32mFull XCode install needed\e[0m"
  exit 1
fi

if ! [ -f /nix/var/nix/profiles/default/bin/nix ]; then
  curl -L https://nixos.org/nix/install | sh -s -- --daemon
fi

if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
  # shellcheck disable=SC1090,SC1091
  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
fi

bash -c 'nix run home-manager/release-24.05 -- --impure switch --flake .#myprofile'
# No explicit update for homebrew, there are enough update and cleanup
# invocations automatically after a certain time has passed.

# find the installers and run them iteratively
# Run zsh install first
# If there are more dependencies between installers in the future,
# this needs to be expanded.
installers=$(find . -name zsh -prune -o -name install.sh -print)
installers="./zsh/install.sh $installers"
for installer in ${installers}; do
  printf "Running \e[32m%s\e[0m\n" "${installer}"
  START=$(date +%s)
  sh -c "${installer}"
  END=$(date +%s)
  DURATION=$((END - START))
  add_measurement "${installer}" $DURATION || true
done
