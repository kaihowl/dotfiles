#!/usr/bin/env bash
#
# bootstrap installs things.

set -e

SCRIPT_DIR=$(dirname "$0")
DOTFILES_ROOT=$(unset CDPATH; cd "$SCRIPT_DIR"/.. > /dev/null; pwd -P)

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] %s\n" "$1"
}

user () {
  printf "  [ \033[0;33m?\033[0m ] %s\n" "$1"
}

success () {
  printf "\033[2K  [ \033[00;32mOK\033[0m ] %s\n" "$1"
}

fail () {
  printf "\033[2K  [\033[0;31mFAIL\033[0m] %s\n" "$1"
  echo ''
  exit
}

remove_outdated_files () {
  rm -rf ~/.config/alacritty/alacritty.yml ~/.color/alacritty.yml && success "Removed outdated alacritty config files"
}

setup_gitconfig () {
  if ! [ -f ~/.gitconfig_credentials ]
  then
    info 'setup gitconfig'

    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi

    preset_user=$(git config --get user.name || true)
    user ' - What is your github author name?'
    if [[ -n "${preset_user}" ]]; then
       git_authorname=$preset_user
    else
      read -re git_authorname
    fi

    preset_email=$(git config --get user.email || true)
    user ' - What is your github author email?'
    if [[ -n "${preset_email}" ]]; then
      git_authoremail=$preset_email
    else
      read -re git_authoremail
    fi

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig_credentials.example > ~/.gitconfig_credentials

    success 'gitconfig'
  fi
}

link_files () {
  ln -s "$1" "$2"
  # Reduce permissions on symlink (and thereby worktree file).
  # Tools like revup complain if the permissions are too wide.
  chmod 0600 "$2"
  success "linked $1 to $2"
}

link_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  if [[ "${CODESPACES}" == "true" ]] || [[ "${CI}" == "true" ]] || [[ "${DOTS_UPGRADE}" == "true" ]]; then
    backup_all=true
  fi

  # shellcheck disable=SC2044
  for source in $(find "$DOTFILES_ROOT" -maxdepth 2 -name \*.symlink)
  do
    filename=$(basename "${source%.*}")
    filename_with_dir=${filename//--/\/}
    dest="$HOME/.${filename_with_dir}"

    mkdir -p "$(dirname "$dest")"

    if [ -f "$dest" ] || [ -d "$dest" ] || [ -h "$dest" ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: ${filename_with_dir}, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -rn 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf "$dest"
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv "$dest" "$dest\.backup"
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files "$source" "$dest"
      else
        success "skipped $source"
      fi

    else
      link_files "$source" "$dest"
    fi

  done
}

setup_gitconfig
link_dotfiles
remove_outdated_files

if [ "$(uname -s)" == "Darwin" ]
then
  info "setting mac-specific settings"
  if "${DOTFILES_ROOT}/osx/set-defaults.sh"
  then
    success "mac settings configured"
  else
    fail "error setting mac-specific settings"
  fi
fi

"${DOTFILES_ROOT}/script/install"

echo ''
echo '  All installed!'
